<?xml version="1.0" encoding="UTF-8" ?><Production_Data Version="5.00"><HTMLTemplateFile>Template.htm</HTMLTemplateFile>
<HTMLTemplateBodyFile>expressShow\SSWFTemplate-body.htm</HTMLTemplateBodyFile>
<HTMLTemplateHeaderFile>expressShow\SSWFTemplate-header.htm</HTMLTemplateHeaderFile>
<VideoFilenameWithPath>C:\Documents and Settings\Mark\My Documents\Camtasia Studio\Total Beginners\output-200711\lesson15\lesson15.swf</VideoFilenameWithPath>
<AddIPodFileSize>0 bytes</AddIPodFileSize>
<AddMP3FileSize>0 bytes</AddMP3FileSize>
<AddPPTFileSize>0 bytes</AddPPTFileSize>
<ProjectName>lesson15</ProjectName>
<MediaDir></MediaDir>
<ShouldCreateMediaDir>0</ShouldCreateMediaDir>
<MaxTimelineWidth>800</MaxTimelineWidth>
<MaxTimelineHeight>600</MaxTimelineHeight>
<MaxTimelineFPS>15.00</MaxTimelineFPS>
<MaxVideoWidth>800</MaxVideoWidth>
<MaxVideoHeight>600</MaxVideoHeight>
<MaxVideoFPS>15.00</MaxVideoFPS>
<MaxPIPWidth>0</MaxPIPWidth>
<MaxPIPHeight>0</MaxPIPHeight>
<MaxPIPFPS>0.00</MaxPIPFPS>
<VideoDuration>840.20</VideoDuration>
<PIPVideoDuration>839.97</PIPVideoDuration>
<VideoFPS>30.00</VideoFPS>
<PIPVideoFPS>30.00</PIPVideoFPS>
<VideoWidth>800</VideoWidth>
<VideoHeight>618</VideoHeight>
<ActualVideoWidth>800</ActualVideoWidth>
<ActualVideoHeight>600</ActualVideoHeight>
<PIPVideoWidth>160</PIPVideoWidth>
<PIPVideoHeight>120</PIPVideoHeight>
<TOCWidth>-1</TOCWidth>
<MinTOCWidth>160</MinTOCWidth>
<TOCDividerHeight>18</TOCDividerHeight>
<TimelineHasAudio>1</TimelineHasAudio>
<TimelineDuration>8402000000</TimelineDuration>
<SWFControllerTotalHeight>18</SWFControllerTotalHeight>
<SWFMinWidth>320</SWFMinWidth>
<SWFTOCXPos>0</SWFTOCXPos>
<SWFTOCYPos>0</SWFTOCYPos>
<SWFTOCWidth>160</SWFTOCWidth>
<SWFTOCHeight>600</SWFTOCHeight>
<SWFHasPIPOverlay>0</SWFHasPIPOverlay>
<SWFControllerColor></SWFControllerColor>
<SWFTimeDispFontColor>0x000000</SWFTimeDispFontColor>
<SWFPlaybackConfigFileName>lesson15_config.xml</SWFPlaybackConfigFileName>
<SWFPlaybackControllerFileName>lesson15_controller.swf</SWFPlaybackControllerFileName>
<SWFPreloaderFileName></SWFPreloaderFileName>
<StripWhitespace>0</StripWhitespace>
<WritingImages>0</WritingImages>
<WritePreviewXML>0</WritePreviewXML>
<DisableTOC>0</DisableTOC>
<AutoPlay>0</AutoPlay>
<CancelledProduction>0</CancelledProduction>
<CancelledProdLength>8401000000</CancelledProdLength>
<Hotspot_Array>
<Hotspot_Array_Object>
               <array>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               <hotspot>
               </hotspot>
               </array>
</Hotspot_Array_Object>
</Hotspot_Array>
<AdjGlobalRenderRangeStart>-1</AdjGlobalRenderRangeStart>
<AdjGlobalRenderRangeStop>-1</AdjGlobalRenderRangeStop>
<AdjRenderRange_Array>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>0</AdjRenderRangeStart>
<AdjRenderRangeStop>335666667</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>335666667</AdjRenderRangeStart>
<AdjRenderRangeStop>1869000000</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>1869000000</AdjRenderRangeStart>
<AdjRenderRangeStop>2998333333</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>2998333333</AdjRenderRangeStart>
<AdjRenderRangeStop>3948333333</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>3948333333</AdjRenderRangeStart>
<AdjRenderRangeStop>4350666667</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>4350666667</AdjRenderRangeStart>
<AdjRenderRangeStop>5447333333</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>5447333333</AdjRenderRangeStart>
<AdjRenderRangeStop>6763000000</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>6763000000</AdjRenderRangeStart>
<AdjRenderRangeStop>7484000000</AdjRenderRangeStop>
</AdjRenderRange_Obj>
<AdjRenderRange_Obj>
<AdjRenderRangeStart>7484000000</AdjRenderRangeStart>
<AdjRenderRangeStop>8402000000</AdjRenderRangeStop>
</AdjRenderRange_Obj>
</AdjRenderRange_Array>
<AdjMarkerDuration_Array>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>335666667</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>1533333333</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>1129333333</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>950000000</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>402333333</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>1096666667</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>1315666667</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>721000000</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
<AdjMarkerDuration_Obj>
<AdjMarkerDuration>918000000</AdjMarkerDuration>
</AdjMarkerDuration_Obj>
</AdjMarkerDuration_Array>
<AdjMarkerTimes_Array>
<AdjMarkerTime_Obj>
<AdjMarkerTime>0</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>335666667</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>1869000000</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>2998333333</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>3948333333</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>4350666667</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>5447333333</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>6763000000</AdjMarkerTime>
</AdjMarkerTime_Obj>
<AdjMarkerTime_Obj>
<AdjMarkerTime>7484000000</AdjMarkerTime>
</AdjMarkerTime_Obj>
</AdjMarkerTimes_Array>
<HasQuizQuestions>0</HasQuizQuestions>
<m_strQuizQuestionOfString>Question @ of @</m_strQuizQuestionOfString>
<m_strQuizPrevString>Prev</m_strQuizPrevString>
<m_strQuizSubmitString>Submit</m_strQuizSubmitString>
<m_strQuizNextString>Next</m_strQuizNextString>
<m_strQuizDoneString>Done</m_strQuizDoneString>
<m_strQuizPreviewString>Preview</m_strQuizPreviewString>
<m_strQuizSendString>Send</m_strQuizSendString>
<m_strQuizMainMessageString>You have reached the end of the questions and this video. Your answers are ready to be sent.</m_strQuizMainMessageString>
<m_strQuizEmailContentsString>E-mail Contents</m_strQuizEmailContentsString>
<m_strQuizEmailToString>E-mail to </m_strQuizEmailToString>
<m_strQuizAnswersSentString>Your answers have been sent.</m_strQuizAnswersSentString>
<m_strQuizSummaryString>You have completed @ of @ questions.</m_strQuizSummaryString>
<m_strQuizScoreString>Score = @/@</m_strQuizScoreString>
<m_strQuizSummaryTitleString>Answers Summary</m_strQuizSummaryTitleString>
<Quiz_Array>
</Quiz_Array>
<Markers_Array>
<Marker_Object>
<MarkerName>Introduction</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>0</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>testGetAvailableBooks() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>335666667</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>getAvailableBooks() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>1869000000</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>testGetUnavailableBooks() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>2998333333</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>getUnavailableBooks() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>3948333333</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>Book TestToString() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>4350666667</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>Book toString() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>5447333333</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>MyLibrary testToString() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>6763000000</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
<Marker_Object>
<MarkerName>MyLibrary toString() Method</MarkerName>
<MarkerImage></MarkerImage>
<MarkerTime>7484000000</MarkerTime>
<IndentLevel>0</IndentLevel>
<ShouldIgnore>0</ShouldIgnore>
</Marker_Object>
</Markers_Array>
<CaptionPlayerXML_Array>
<Caption_Array_Object>
<CaptionXML>   <array>
      <captionObject>
         <Time>0.000000</Time>
         <Caption><![CDATA[(Opening music ...)<BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>9.500000</Time>
         <Caption><![CDATA[Hello again. Welcome back to Eclipse and Java for <BR>Total Beginners.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>14.800000</Time>
         <Caption><![CDATA[Congratulations! We&apos;re almost done. We have a few <BR>more methods to write to complete our MyLibrary <BR>class. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>21.100000</Time>
         <Caption><![CDATA[The first two are fairly simple and very similar. <BR>Let&apos;s work on the getAvailableBooks() first. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>27.900000</Time>
         <Caption><![CDATA[This method will return a list of all books that <BR>are not currently checked out. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>34.600000</Time>
         <Caption><![CDATA[So we&apos;ll open up our project, and open up the <BR>MyLibraryTest class. Maximize the window. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>43.600000</Time>
         <Caption><![CDATA[We&apos;ll go down to the end of the class, and we&apos;ll <BR>make sure to get the method between these two <BR>curly braces. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>50.500000</Time>
         <Caption><![CDATA[Then it&apos;s “public void testGetAvailableBooks() {“. <BR>Then we can copy code. We&apos;ll copy the “setup();” <BR>and “addItems();” lines. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>65.200000</Time>
         <Caption><![CDATA[Then we&apos;ll copy the line to create the test <BR>ArrayList. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>70.400000</Time>
         <Caption><![CDATA[Then we&apos;ll change “getBooksForPerson(p1)” to <BR>“getAvailableBooks()”, our new method.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>79.200000</Time>
         <Caption><![CDATA[It doesn&apos;t exist yet. Let&apos;s use Code Assist right <BR>now to create the method. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>84.000000</Time>
         <Caption><![CDATA[Then, Eclipse will know about it. Then we can <BR>validate it as we go. So we flip back to <BR>MyLibraryTest. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>92.100000</Time>
         <Caption><![CDATA[So now we&apos;ve got our “testBooks” created. We&apos;ll be <BR>able to copy a lot of the code from the method <BR>above. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>99.500000</Time>
         <Caption><![CDATA[We&apos;ll copy these two assert statements. The first <BR>one says the size of the “testBooks” will be 2 <BR>when we start, ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>108.800000</Time>
         <Caption><![CDATA[and that Book b2 will be in position 1 (remember, <BR>1 is the second position). <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>113.600000</Time>
         <Caption><![CDATA[So we&apos;re just confirming our starting point -– <BR>that all of the books are available. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>119.200000</Time>
         <Caption><![CDATA[So now we&apos;ll check out Book b1 to Person p1, and <BR>we can copy that from the method above.  <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>127.000000</Time>
         <Caption><![CDATA[Then we need to set our “testBooks” ArrayList <BR>again, so we&apos;ll copy that from here. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>134.200000</Time>
         <Caption><![CDATA[Now we can copy these two assertEquals statements <BR>from the method above, because we expect 1 element <BR>in the list. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>144.900000</Time>
         <Caption><![CDATA[So now we&apos;ll check out the second Book, so we&apos;ll <BR>copy that line. We&apos;ll reset the “testBooks” <BR>ArrayList.]]></Caption>
      </captionObject>
      <captionObject>
         <Time>155.400000</Time>
         <Caption><![CDATA[Then we&apos;ll copy the assertEquals, but this time <BR>we&apos;ll assert that the size equals 0. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>165.800000</Time>
         <Caption><![CDATA[So we&apos;ll save our file. Now after the first <BR>checkOut(), we can see we&apos;ve got a problem. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>171.100000</Time>
         <Caption><![CDATA[We&apos;ve checked out Book b1, but we&apos;re saying that <BR>Book b1 is still on the list. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>176.300000</Time>
         <Caption><![CDATA[So we need to fix that. So we&apos;ll change “b1” to <BR>“b2”, because we checked out Book b1, so Book b2 <BR>should still be on the list. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>186.900000</Time>
         <Caption><![CDATA[Next, let&apos;s write the method in the MyLibrary <BR>class. We start the method by declaring a new <BR>ArrayList of type Book. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>201.600000</Time>
         <Caption><![CDATA[We&apos;ll call it “result”. Then we&apos;ll do a “for each” <BR>loop. So we go “for”, Ctrl+Space, and select the <BR>“foreach” option. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>215.100000</Time>
         <Caption><![CDATA[Then “Book aBook” (aBook is the local variable) <BR>and we&apos;ll loop through the &quot;this.getBooks()&quot; list. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>227.000000</Time>
         <Caption><![CDATA[Then for each Book, we&apos;ll say <BR>“if (aBook.getPerson() == null)” then we&apos;ll do <BR>this block of code. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>244.400000</Time>
         <Caption><![CDATA[And this block of code is just to do “result.add<BR>(aBook);”. So we&apos;ll add the current Book to the <BR>result list. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>255.200000</Time>
         <Caption><![CDATA[Then we come out of the “for each” loop, and then <BR>just “return result;”. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>263.800000</Time>
         <Caption><![CDATA[This method is very similar to, and a little <BR>simpler than, then the getBooksForPerson() method. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>271.300000</Time>
         <Caption><![CDATA[All we do here is a single check to see if the <BR>person field is null. If it is null, then we add <BR>it. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>278.700000</Time>
         <Caption><![CDATA[Otherwise, if there is any Person in there, we <BR>don&apos;t add it to the available books list. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>284.700000</Time>
         <Caption><![CDATA[So now, we&apos;ll re-run all of our tests and see how <BR>we did. So we go to AllTests, Run / Run As / JUnit <BR>Test, ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>295.700000</Time>
         <Caption><![CDATA[and the tests succeed. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>299.800000</Time>
         <Caption><![CDATA[Next, we&apos;ll create the test method for the <BR>getUnavailableBooks() method. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>306.000000</Time>
         <Caption><![CDATA[And here we can copy the test method for the <BR>getBooksForPerson(), because the two methods turn <BR>out to be very similar. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>315.100000</Time>
         <Caption><![CDATA[So we&apos;ll copy that, then we&apos;ll be careful to get <BR>it between the curly braces. And then we&apos;ll paste.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>322.000000</Time>
         <Caption><![CDATA[Now we&apos;ll change the name of the test method to <BR>“testGetUnavailableBooks()”. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>330.500000</Time>
         <Caption><![CDATA[Now we need to change these method calls down here <BR>to “getUnavailableBooks()”. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>335.900000</Time>
         <Caption><![CDATA[So we&apos;ll change the first one and then we&apos;ll copy <BR>and paste. So we&apos;ll copy here and then paste it <BR>there and paste it there. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>352.200000</Time>
         <Caption><![CDATA[Just to change this a little, we&apos;ll check out Book <BR>b2 to Person p2. It should have the same result. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>361.000000</Time>
         <Caption><![CDATA[Then we&apos;ll use Quick Fix to create the empty <BR>method over in our MyLibrary class. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>367.200000</Time>
         <Caption><![CDATA[We&apos;ll save that. Come back. And save this. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>372.300000</Time>
         <Caption><![CDATA[So this method should be very familiar. We&apos;re <BR>setting up our test. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>378.400000</Time>
         <Caption><![CDATA[At the beginning, all of the books are available, <BR>so, when we do our first getUnavailableBooks(), <BR>the size is 0. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>384.600000</Time>
         <Caption><![CDATA[Then we check out 1 Book. Make sure that there is <BR>1 unavailable Book. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>389.300000</Time>
         <Caption><![CDATA[Then we check out the second Book. And now both <BR>books should be unavailable. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>394.800000</Time>
         <Caption><![CDATA[So now we&apos;ll go to the MyLibrary class and finish <BR>the getUnavailableBooks() method. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>401.900000</Time>
         <Caption><![CDATA[And for this we&apos;ll just copy the “insides” of the <BR>getAvailableBooks() method, and paste it in (being <BR>careful about the curly braces). ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>409.400000</Time>
         <Caption><![CDATA[Then we just change 1 line of code. Instead of <BR>saying that “getPerson() == null”, we say <BR>“getPerson() != null”. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>418.200000</Time>
         <Caption><![CDATA[And that will get us unavailable books. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>423.500000</Time>
         <Caption><![CDATA[Now we&apos;ll save, go back to the test class, re-run <BR>our test ...<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>432.800000</Time>
         <Caption><![CDATA[and again everything works. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>436.200000</Time>
         <Caption><![CDATA[The last two methods we need are toString() <BR>methods for the MyLibrary and the Book class.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>442.300000</Time>
         <Caption><![CDATA[As we discussed before, the toString() method <BR>should display a string that contains a brief <BR>description of the object. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>452.000000</Time>
         <Caption><![CDATA[Now, let&apos;s write our first test method. We&apos;ll <BR>start with the BookTest. We&apos;ll write a test method <BR>for the toString() method in the Book class. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>465.800000</Time>
         <Caption><![CDATA[So the test method is “public void testToString() <BR>{“. (We&apos;re inside the BookTest class.) We&apos;ll copy <BR>some code to create a test Book and test Person. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>486.300000</Time>
         <Caption><![CDATA[So we&apos;ll create &quot;War And Peace&quot; and &quot;Elvis&quot;. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>489.400000</Time>
         <Caption><![CDATA[Our first assert statement is “assertEquals”. And <BR>we&apos;ll say “War And Peace by unknown author; <BR>Available”. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>505.100000</Time>
         <Caption><![CDATA[So we&apos;re saying this is going to be available, <BR>since it hasn&apos;t been checked out yet. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>510.000000</Time>
         <Caption><![CDATA[Then the actual will be “b2.toString()”. So we&apos;re <BR>just saying that&apos;s going to be the toString() for <BR>b2. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>520.300000</Time>
         <Caption><![CDATA[Now, we&apos;ll do “b2.setPerson(p2);”. So now b2 is <BR>checked out to p2. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>529.100000</Time>
         <Caption><![CDATA[We&apos;ll copy and paste the assert statement. Now, <BR>instead of being available, it will say “Checked <BR>out to Elvis”. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>541.300000</Time>
         <Caption><![CDATA[And then we&apos;ll save. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>544.700000</Time>
         <Caption><![CDATA[<BR>So now we&apos;ll go to the Book class and write the <BR>toString() method. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>556.300000</Time>
         <Caption><![CDATA[<BR>So it&apos;s “public String” (it returns a String) <BR>“toString() {“. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>570.100000</Time>
         <Caption><![CDATA[<BR>We&apos;ll create a local String variable called <BR>“available”, ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>575.000000</Time>
         <Caption><![CDATA[<BR><BR>and then we&apos;ll set this using an “if” statement. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>577.400000</Time>
         <Caption><![CDATA[<BR>We&apos;ll say “if (this.getPerson() == null) {“ then <BR>we&apos;ll set “available =” the word “Available”. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>594.400000</Time>
         <Caption><![CDATA[<BR>Then we&apos;ll say “else {“ and we&apos;ll say “available = <BR>“Checked out to “ (space) ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>608.400000</Time>
         <Caption><![CDATA[<BR><BR>plus “this.getPerson().getName();”. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>620.200000</Time>
         <Caption><![CDATA[<BR>Then we&apos;ll return “this.getTitle()” plus the word <BR>“ by “ (surrounded by spaces), ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>630.700000</Time>
         <Caption><![CDATA[plus “this.getAuthor()”, plus a “; ”  + the String <BR>variable “available”. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>645.000000</Time>
         <Caption><![CDATA[<BR>So we&apos;re setting “available” depending on whether <BR>or not the Book is checked out. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>652.000000</Time>
         <Caption><![CDATA[<BR>Then we&apos;re just returning the title, the word <BR>&quot;by&quot;, the author, a semi-colon, ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>658.000000</Time>
         <Caption><![CDATA[<BR>and then what&apos;s in the local variable called <BR>“available”. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>665.000000</Time>
         <Caption><![CDATA[<BR>So we&apos;ll save this. We&apos;ll go back to our BookTest <BR>class and run the test. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>674.000000</Time>
         <Caption><![CDATA[<BR><BR>And it succeeds. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>676.400000</Time>
         <Caption><![CDATA[<BR>Finally, let&apos;s write the toString() method for the <BR>MyLibrary class.  ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>681.700000</Time>
         <Caption><![CDATA[<BR>The MyLibrary could contain lots of books and lots <BR>of people.]]></Caption>
      </captionObject>
      <captionObject>
         <Time>687.700000</Time>
         <Caption><![CDATA[<BR>So it&apos;s not practical to include all of the detail <BR>in the toString() method. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>693.900000</Time>
         <Caption><![CDATA[<BR>So we&apos;ll just include a summary of the object, as <BR>follows.]]></Caption>
      </captionObject>
      <captionObject>
         <Time>700.600000</Time>
         <Caption><![CDATA[<BR>We&apos;ll go down below the last method, being careful <BR>about the curly braces. ]]></Caption>
      </captionObject>
      <captionObject>
         <Time>707.700000</Time>
         <Caption><![CDATA[<BR>It&apos;s “public void testToString() {“. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>712.000000</Time>
         <Caption><![CDATA[We&apos;ll run the setup() method and addItems() method <BR>to get our test object set up. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>719.700000</Time>
         <Caption><![CDATA[Then we&apos;ll just do one assert statement. <BR>“assertEquals(“Test:” <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>727.300000</Time>
         <Caption><![CDATA[(which is the name of the test MyLibrary object). <BR>“2 books; 2 people.”.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>734.000000</Time>
         <Caption><![CDATA[So that&apos;s what we want the toString() method to <BR>do. And it&apos;s going to equal “ml.toString()”. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>743.400000</Time>
         <Caption><![CDATA[And we&apos;ll save. Then we&apos;ll go to the MyLibrary <BR>class, make sure we&apos;re after the last method. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>754.700000</Time>
         <Caption><![CDATA[And it&apos;s “public String toString() {“. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>762.300000</Time>
         <Caption><![CDATA[And we&apos;ll return “this.getName() + “: “ + <BR>this.getBooks().size() + “ books; “ + <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>785.500000</Time>
         <Caption><![CDATA[this.getPeople().size() + “ people.”; <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>797.400000</Time>
         <Caption><![CDATA[And we&apos;ll save that. Now we&apos;ll go back to the <BR>MyLibraryTest, run the test, <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>808.200000</Time>
         <Caption><![CDATA[and it passes. <BR><BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>811.200000</Time>
         <Caption><![CDATA[At this point, we have a set of classes that can  <BR>create and manage a personal library – sort of. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>817.500000</Time>
         <Caption><![CDATA[We&apos;ve got the back-end tools, but we don&apos;t have a <BR>way to use them.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>821.700000</Time>
         <Caption><![CDATA[In the next lesson, we&apos;ll learn how to write a <BR>stand-alone Java program that uses our classes.<BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>827.900000</Time>
         <Caption><![CDATA[This is the end of Lesson 15. I&apos;m Mark Dexter <BR>saying so long for now. <BR>]]></Caption>
      </captionObject>
      <captionObject>
         <Time>833.400000</Time>
         <Caption><![CDATA[(Closing music ...)]]></Caption>
      </captionObject>
   </array>
</CaptionXML>
</Caption_Array_Object>
</CaptionPlayerXML_Array>
<CaptionFontHeight>23</CaptionFontHeight>
<MaxCaptionsCharsPerLine>50</MaxCaptionsCharsPerLine>
<TimelineCaptionCount>100</TimelineCaptionCount>
<CaptionHeight>0</CaptionHeight>
<CloseCaptions_Array>
<captionObject>
<Time>0.000000</Time>
<Caption><![CDATA[(Opening music ...)<BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>9.500000</Time>
<Caption><![CDATA[Hello again. Welcome back to Eclipse and Java for <BR>Total Beginners.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>14.800000</Time>
<Caption><![CDATA[Congratulations! We&apos;re almost done. We have a few <BR>more methods to write to complete our MyLibrary <BR>class. ]]></Caption>
</captionObject>
<captionObject>
<Time>21.100000</Time>
<Caption><![CDATA[The first two are fairly simple and very similar. <BR>Let&apos;s work on the getAvailableBooks() first. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>27.900000</Time>
<Caption><![CDATA[This method will return a list of all books that <BR>are not currently checked out. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>34.600000</Time>
<Caption><![CDATA[So we&apos;ll open up our project, and open up the <BR>MyLibraryTest class. Maximize the window. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>43.600000</Time>
<Caption><![CDATA[We&apos;ll go down to the end of the class, and we&apos;ll <BR>make sure to get the method between these two <BR>curly braces. ]]></Caption>
</captionObject>
<captionObject>
<Time>50.500000</Time>
<Caption><![CDATA[Then it&apos;s “public void testGetAvailableBooks() {“. <BR>Then we can copy code. We&apos;ll copy the “setup();” <BR>and “addItems();” lines. ]]></Caption>
</captionObject>
<captionObject>
<Time>65.200000</Time>
<Caption><![CDATA[Then we&apos;ll copy the line to create the test <BR>ArrayList. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>70.400000</Time>
<Caption><![CDATA[Then we&apos;ll change “getBooksForPerson(p1)” to <BR>“getAvailableBooks()”, our new method.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>79.200000</Time>
<Caption><![CDATA[It doesn&apos;t exist yet. Let&apos;s use Code Assist right <BR>now to create the method. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>84.000000</Time>
<Caption><![CDATA[Then, Eclipse will know about it. Then we can <BR>validate it as we go. So we flip back to <BR>MyLibraryTest. ]]></Caption>
</captionObject>
<captionObject>
<Time>92.100000</Time>
<Caption><![CDATA[So now we&apos;ve got our “testBooks” created. We&apos;ll be <BR>able to copy a lot of the code from the method <BR>above. ]]></Caption>
</captionObject>
<captionObject>
<Time>99.500000</Time>
<Caption><![CDATA[We&apos;ll copy these two assert statements. The first <BR>one says the size of the “testBooks” will be 2 <BR>when we start, ]]></Caption>
</captionObject>
<captionObject>
<Time>108.800000</Time>
<Caption><![CDATA[and that Book b2 will be in position 1 (remember, <BR>1 is the second position). <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>113.600000</Time>
<Caption><![CDATA[So we&apos;re just confirming our starting point -– <BR>that all of the books are available. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>119.200000</Time>
<Caption><![CDATA[So now we&apos;ll check out Book b1 to Person p1, and <BR>we can copy that from the method above.  <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>127.000000</Time>
<Caption><![CDATA[Then we need to set our “testBooks” ArrayList <BR>again, so we&apos;ll copy that from here. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>134.200000</Time>
<Caption><![CDATA[Now we can copy these two assertEquals statements <BR>from the method above, because we expect 1 element <BR>in the list. ]]></Caption>
</captionObject>
<captionObject>
<Time>144.900000</Time>
<Caption><![CDATA[So now we&apos;ll check out the second Book, so we&apos;ll <BR>copy that line. We&apos;ll reset the “testBooks” <BR>ArrayList.]]></Caption>
</captionObject>
<captionObject>
<Time>155.400000</Time>
<Caption><![CDATA[Then we&apos;ll copy the assertEquals, but this time <BR>we&apos;ll assert that the size equals 0. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>165.800000</Time>
<Caption><![CDATA[So we&apos;ll save our file. Now after the first <BR>checkOut(), we can see we&apos;ve got a problem. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>171.100000</Time>
<Caption><![CDATA[We&apos;ve checked out Book b1, but we&apos;re saying that <BR>Book b1 is still on the list. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>176.300000</Time>
<Caption><![CDATA[So we need to fix that. So we&apos;ll change “b1” to <BR>“b2”, because we checked out Book b1, so Book b2 <BR>should still be on the list. ]]></Caption>
</captionObject>
<captionObject>
<Time>186.900000</Time>
<Caption><![CDATA[Next, let&apos;s write the method in the MyLibrary <BR>class. We start the method by declaring a new <BR>ArrayList of type Book. ]]></Caption>
</captionObject>
<captionObject>
<Time>201.600000</Time>
<Caption><![CDATA[We&apos;ll call it “result”. Then we&apos;ll do a “for each” <BR>loop. So we go “for”, Ctrl+Space, and select the <BR>“foreach” option. ]]></Caption>
</captionObject>
<captionObject>
<Time>215.100000</Time>
<Caption><![CDATA[Then “Book aBook” (aBook is the local variable) <BR>and we&apos;ll loop through the &quot;this.getBooks()&quot; list. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>227.000000</Time>
<Caption><![CDATA[Then for each Book, we&apos;ll say <BR>“if (aBook.getPerson() == null)” then we&apos;ll do <BR>this block of code. ]]></Caption>
</captionObject>
<captionObject>
<Time>244.400000</Time>
<Caption><![CDATA[And this block of code is just to do “result.add<BR>(aBook);”. So we&apos;ll add the current Book to the <BR>result list. ]]></Caption>
</captionObject>
<captionObject>
<Time>255.200000</Time>
<Caption><![CDATA[Then we come out of the “for each” loop, and then <BR>just “return result;”. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>263.800000</Time>
<Caption><![CDATA[This method is very similar to, and a little <BR>simpler than, then the getBooksForPerson() method. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>271.300000</Time>
<Caption><![CDATA[All we do here is a single check to see if the <BR>person field is null. If it is null, then we add <BR>it. ]]></Caption>
</captionObject>
<captionObject>
<Time>278.700000</Time>
<Caption><![CDATA[Otherwise, if there is any Person in there, we <BR>don&apos;t add it to the available books list. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>284.700000</Time>
<Caption><![CDATA[So now, we&apos;ll re-run all of our tests and see how <BR>we did. So we go to AllTests, Run / Run As / JUnit <BR>Test, ]]></Caption>
</captionObject>
<captionObject>
<Time>295.700000</Time>
<Caption><![CDATA[and the tests succeed. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>299.800000</Time>
<Caption><![CDATA[Next, we&apos;ll create the test method for the <BR>getUnavailableBooks() method. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>306.000000</Time>
<Caption><![CDATA[And here we can copy the test method for the <BR>getBooksForPerson(), because the two methods turn <BR>out to be very similar. ]]></Caption>
</captionObject>
<captionObject>
<Time>315.100000</Time>
<Caption><![CDATA[So we&apos;ll copy that, then we&apos;ll be careful to get <BR>it between the curly braces. And then we&apos;ll paste.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>322.000000</Time>
<Caption><![CDATA[Now we&apos;ll change the name of the test method to <BR>“testGetUnavailableBooks()”. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>330.500000</Time>
<Caption><![CDATA[Now we need to change these method calls down here <BR>to “getUnavailableBooks()”. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>335.900000</Time>
<Caption><![CDATA[So we&apos;ll change the first one and then we&apos;ll copy <BR>and paste. So we&apos;ll copy here and then paste it <BR>there and paste it there. ]]></Caption>
</captionObject>
<captionObject>
<Time>352.200000</Time>
<Caption><![CDATA[Just to change this a little, we&apos;ll check out Book <BR>b2 to Person p2. It should have the same result. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>361.000000</Time>
<Caption><![CDATA[Then we&apos;ll use Quick Fix to create the empty <BR>method over in our MyLibrary class. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>367.200000</Time>
<Caption><![CDATA[We&apos;ll save that. Come back. And save this. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>372.300000</Time>
<Caption><![CDATA[So this method should be very familiar. We&apos;re <BR>setting up our test. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>378.400000</Time>
<Caption><![CDATA[At the beginning, all of the books are available, <BR>so, when we do our first getUnavailableBooks(), <BR>the size is 0. ]]></Caption>
</captionObject>
<captionObject>
<Time>384.600000</Time>
<Caption><![CDATA[Then we check out 1 Book. Make sure that there is <BR>1 unavailable Book. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>389.300000</Time>
<Caption><![CDATA[Then we check out the second Book. And now both <BR>books should be unavailable. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>394.800000</Time>
<Caption><![CDATA[So now we&apos;ll go to the MyLibrary class and finish <BR>the getUnavailableBooks() method. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>401.900000</Time>
<Caption><![CDATA[And for this we&apos;ll just copy the “insides” of the <BR>getAvailableBooks() method, and paste it in (being <BR>careful about the curly braces). ]]></Caption>
</captionObject>
<captionObject>
<Time>409.400000</Time>
<Caption><![CDATA[Then we just change 1 line of code. Instead of <BR>saying that “getPerson() == null”, we say <BR>“getPerson() != null”. ]]></Caption>
</captionObject>
<captionObject>
<Time>418.200000</Time>
<Caption><![CDATA[And that will get us unavailable books. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>423.500000</Time>
<Caption><![CDATA[Now we&apos;ll save, go back to the test class, re-run <BR>our test ...<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>432.800000</Time>
<Caption><![CDATA[and again everything works. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>436.200000</Time>
<Caption><![CDATA[The last two methods we need are toString() <BR>methods for the MyLibrary and the Book class.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>442.300000</Time>
<Caption><![CDATA[As we discussed before, the toString() method <BR>should display a string that contains a brief <BR>description of the object. ]]></Caption>
</captionObject>
<captionObject>
<Time>452.000000</Time>
<Caption><![CDATA[Now, let&apos;s write our first test method. We&apos;ll <BR>start with the BookTest. We&apos;ll write a test method <BR>for the toString() method in the Book class. ]]></Caption>
</captionObject>
<captionObject>
<Time>465.800000</Time>
<Caption><![CDATA[So the test method is “public void testToString() <BR>{“. (We&apos;re inside the BookTest class.) We&apos;ll copy <BR>some code to create a test Book and test Person. ]]></Caption>
</captionObject>
<captionObject>
<Time>486.300000</Time>
<Caption><![CDATA[So we&apos;ll create &quot;War And Peace&quot; and &quot;Elvis&quot;. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>489.400000</Time>
<Caption><![CDATA[Our first assert statement is “assertEquals”. And <BR>we&apos;ll say “War And Peace by unknown author; <BR>Available”. ]]></Caption>
</captionObject>
<captionObject>
<Time>505.100000</Time>
<Caption><![CDATA[So we&apos;re saying this is going to be available, <BR>since it hasn&apos;t been checked out yet. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>510.000000</Time>
<Caption><![CDATA[Then the actual will be “b2.toString()”. So we&apos;re <BR>just saying that&apos;s going to be the toString() for <BR>b2. ]]></Caption>
</captionObject>
<captionObject>
<Time>520.300000</Time>
<Caption><![CDATA[Now, we&apos;ll do “b2.setPerson(p2);”. So now b2 is <BR>checked out to p2. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>529.100000</Time>
<Caption><![CDATA[We&apos;ll copy and paste the assert statement. Now, <BR>instead of being available, it will say “Checked <BR>out to Elvis”. ]]></Caption>
</captionObject>
<captionObject>
<Time>541.300000</Time>
<Caption><![CDATA[And then we&apos;ll save. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>544.700000</Time>
<Caption><![CDATA[<BR>So now we&apos;ll go to the Book class and write the <BR>toString() method. ]]></Caption>
</captionObject>
<captionObject>
<Time>556.300000</Time>
<Caption><![CDATA[<BR>So it&apos;s “public String” (it returns a String) <BR>“toString() {“. ]]></Caption>
</captionObject>
<captionObject>
<Time>570.100000</Time>
<Caption><![CDATA[<BR>We&apos;ll create a local String variable called <BR>“available”, ]]></Caption>
</captionObject>
<captionObject>
<Time>575.000000</Time>
<Caption><![CDATA[<BR><BR>and then we&apos;ll set this using an “if” statement. ]]></Caption>
</captionObject>
<captionObject>
<Time>577.400000</Time>
<Caption><![CDATA[<BR>We&apos;ll say “if (this.getPerson() == null) {“ then <BR>we&apos;ll set “available =” the word “Available”. ]]></Caption>
</captionObject>
<captionObject>
<Time>594.400000</Time>
<Caption><![CDATA[<BR>Then we&apos;ll say “else {“ and we&apos;ll say “available = <BR>“Checked out to “ (space) ]]></Caption>
</captionObject>
<captionObject>
<Time>608.400000</Time>
<Caption><![CDATA[<BR><BR>plus “this.getPerson().getName();”. ]]></Caption>
</captionObject>
<captionObject>
<Time>620.200000</Time>
<Caption><![CDATA[<BR>Then we&apos;ll return “this.getTitle()” plus the word <BR>“ by “ (surrounded by spaces), ]]></Caption>
</captionObject>
<captionObject>
<Time>630.700000</Time>
<Caption><![CDATA[plus “this.getAuthor()”, plus a “; ”  + the String <BR>variable “available”. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>645.000000</Time>
<Caption><![CDATA[<BR>So we&apos;re setting “available” depending on whether <BR>or not the Book is checked out. ]]></Caption>
</captionObject>
<captionObject>
<Time>652.000000</Time>
<Caption><![CDATA[<BR>Then we&apos;re just returning the title, the word <BR>&quot;by&quot;, the author, a semi-colon, ]]></Caption>
</captionObject>
<captionObject>
<Time>658.000000</Time>
<Caption><![CDATA[<BR>and then what&apos;s in the local variable called <BR>“available”. ]]></Caption>
</captionObject>
<captionObject>
<Time>665.000000</Time>
<Caption><![CDATA[<BR>So we&apos;ll save this. We&apos;ll go back to our BookTest <BR>class and run the test. ]]></Caption>
</captionObject>
<captionObject>
<Time>674.000000</Time>
<Caption><![CDATA[<BR><BR>And it succeeds. ]]></Caption>
</captionObject>
<captionObject>
<Time>676.400000</Time>
<Caption><![CDATA[<BR>Finally, let&apos;s write the toString() method for the <BR>MyLibrary class.  ]]></Caption>
</captionObject>
<captionObject>
<Time>681.700000</Time>
<Caption><![CDATA[<BR>The MyLibrary could contain lots of books and lots <BR>of people.]]></Caption>
</captionObject>
<captionObject>
<Time>687.700000</Time>
<Caption><![CDATA[<BR>So it&apos;s not practical to include all of the detail <BR>in the toString() method. ]]></Caption>
</captionObject>
<captionObject>
<Time>693.900000</Time>
<Caption><![CDATA[<BR>So we&apos;ll just include a summary of the object, as <BR>follows.]]></Caption>
</captionObject>
<captionObject>
<Time>700.600000</Time>
<Caption><![CDATA[<BR>We&apos;ll go down below the last method, being careful <BR>about the curly braces. ]]></Caption>
</captionObject>
<captionObject>
<Time>707.700000</Time>
<Caption><![CDATA[<BR>It&apos;s “public void testToString() {“. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>712.000000</Time>
<Caption><![CDATA[We&apos;ll run the setup() method and addItems() method <BR>to get our test object set up. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>719.700000</Time>
<Caption><![CDATA[Then we&apos;ll just do one assert statement. <BR>“assertEquals(“Test:” <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>727.300000</Time>
<Caption><![CDATA[(which is the name of the test MyLibrary object). <BR>“2 books; 2 people.”.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>734.000000</Time>
<Caption><![CDATA[So that&apos;s what we want the toString() method to <BR>do. And it&apos;s going to equal “ml.toString()”. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>743.400000</Time>
<Caption><![CDATA[And we&apos;ll save. Then we&apos;ll go to the MyLibrary <BR>class, make sure we&apos;re after the last method. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>754.700000</Time>
<Caption><![CDATA[And it&apos;s “public String toString() {“. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>762.300000</Time>
<Caption><![CDATA[And we&apos;ll return “this.getName() + “: “ + <BR>this.getBooks().size() + “ books; “ + <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>785.500000</Time>
<Caption><![CDATA[this.getPeople().size() + “ people.”; <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>797.400000</Time>
<Caption><![CDATA[And we&apos;ll save that. Now we&apos;ll go back to the <BR>MyLibraryTest, run the test, <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>808.200000</Time>
<Caption><![CDATA[and it passes. <BR><BR>]]></Caption>
</captionObject>
<captionObject>
<Time>811.200000</Time>
<Caption><![CDATA[At this point, we have a set of classes that can  <BR>create and manage a personal library – sort of. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>817.500000</Time>
<Caption><![CDATA[We&apos;ve got the back-end tools, but we don&apos;t have a <BR>way to use them.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>821.700000</Time>
<Caption><![CDATA[In the next lesson, we&apos;ll learn how to write a <BR>stand-alone Java program that uses our classes.<BR>]]></Caption>
</captionObject>
<captionObject>
<Time>827.900000</Time>
<Caption><![CDATA[This is the end of Lesson 15. I&apos;m Mark Dexter <BR>saying so long for now. <BR>]]></Caption>
</captionObject>
<captionObject>
<Time>833.400000</Time>
<Caption><![CDATA[(Closing music ...)]]></Caption>
</captionObject>
</CloseCaptions_Array>
<NumMetaDataTypes>34</NumMetaDataTypes>
<MetaData_Array>
<MetaData_Object>
<MetaDataType>Creator</MetaDataType>
<MetaDataValue>Mark Dexter</MetaDataValue>
<MetaDataEmbedName>DC.creator</MetaDataEmbedName>
</MetaData_Object>
</MetaData_Array>
<NumFileTypesUsedByProduction>4</NumFileTypesUsedByProduction>
<FileTypesUsed_Array>
<FileTypeUsed_Object>
<FileTypeName>Video</FileTypeName>
</FileTypeUsed_Object>
<FileTypeUsed_Object>
<FileTypeName>HTMLFile</FileTypeName>
</FileTypeUsed_Object>
<FileTypeUsed_Object>
<FileTypeName>EmbededPlayerJS</FileTypeName>
</FileTypeUsed_Object>
<FileTypeUsed_Object>
<FileTypeName>ProductionInfoXML</FileTypeName>
</FileTypeUsed_Object>
</FileTypesUsed_Array>
<NumFilesTotal>4</NumFilesTotal>
<ProducedFiles_Array>
<ProducedFile_Object>
<FileName>C:\Documents and Settings\Mark\My Documents\Camtasia Studio\Total Beginners\output-200711\lesson15\lesson15.swf</FileName>
<FileSize>16649013</FileSize>
<FileType>Video</FileType>
<WhichFilesOfCurType>0</WhichFilesOfCurType>
<TotalFilesOfCurType>1</TotalFilesOfCurType>
</ProducedFile_Object>
<ProducedFile_Object>
<FileName>C:\Documents and Settings\Mark\My Documents\Camtasia Studio\Total Beginners\output-200711\lesson15\lesson15.html</FileName>
<FileSize>2975</FileSize>
<FileType>HTMLFile</FileType>
<WhichFilesOfCurType>0</WhichFilesOfCurType>
<TotalFilesOfCurType>1</TotalFilesOfCurType>
</ProducedFile_Object>
<ProducedFile_Object>
<FileName>C:\Documents and Settings\Mark\My Documents\Camtasia Studio\Total Beginners\output-200711\lesson15\swfobject.js</FileName>
<FileSize>6880</FileSize>
<FileType>EmbededPlayerJS</FileType>
<WhichFilesOfCurType>0</WhichFilesOfCurType>
<TotalFilesOfCurType>1</TotalFilesOfCurType>
</ProducedFile_Object>
<ProducedFile_Object>
<FileName>C:\Documents and Settings\Mark\My Documents\Camtasia Studio\Total Beginners\output-200711\lesson15\ProductionInfo.xml</FileName>
<FileSize>58202</FileSize>
<FileType>ProductionInfoXML</FileType>
<WhichFilesOfCurType>0</WhichFilesOfCurType>
<TotalFilesOfCurType>1</TotalFilesOfCurType>
</ProducedFile_Object>
</ProducedFiles_Array>
<OutputBasePath>C:\Documents and Settings\Mark\My Documents\Camtasia Studio\Total Beginners\output-200711\lesson15\</OutputBasePath>
<ProductionFormat>SWF</ProductionFormat>
<NumVideoSegments>1</NumVideoSegments>
<NumHTMLFiles>1</NumHTMLFiles>
<TotalProductionSize>16717070</TotalProductionSize>
<m_cf_rtRenderRangeStart>-1</m_cf_rtRenderRangeStart>
<m_cf_rtRenderRangeStop>-1</m_cf_rtRenderRangeStop>
<m_cf_strTempDir>C:\DOCUME~1\Mark\LOCALS~1\Temp\</m_cf_strTempDir>
<m_cf_bWritePIPFile>0</m_cf_bWritePIPFile>
<m_cf_bDisablePIPVideo>1</m_cf_bDisablePIPVideo>
<m_cf_bWriteIndex>1</m_cf_bWriteIndex>
<m_cf_bWriteMultipleFiles>0</m_cf_bWriteMultipleFiles>
<m_cf_strHTMLTemplateName>Template.htm</m_cf_strHTMLTemplateName>
<m_cf_HTMLAlignment>1</m_cf_HTMLAlignment>
<m_cf_bSCORMOutput>0</m_cf_bSCORMOutput>
<m_cf_bController>1</m_cf_bController>
<m_cf_bAutoPlay>1</m_cf_bAutoPlay>
<m_cf_bNumberIndexMarkers>0</m_cf_bNumberIndexMarkers>
<m_cf_bShortenIndexNames>1</m_cf_bShortenIndexNames>
<m_cf_nShortenedIndexLength>17</m_cf_nShortenedIndexLength>
<m_cf_bQuizShowFeedback>1</m_cf_bQuizShowFeedback>
<m_cf_bEMailQuizResults>0</m_cf_bEMailQuizResults>
<m_cf_bEMailIncludeScore>0</m_cf_bEMailIncludeScore>
<m_cf_bJavaScriptQuizResults>0</m_cf_bJavaScriptQuizResults>
<m_cf_bHTMLOutput>1</m_cf_bHTMLOutput>
<m_cf_SCORMVersion>0</m_cf_SCORMVersion>
<m_cf_strManifestID>ID-9305653E-3CA3-49D4-8C95-A18B8F0E5D55</m_cf_strManifestID>
<m_cf_strManifestTitle></m_cf_strManifestTitle>
<m_cf_strDuration>0:13:59.01</m_cf_strDuration>
<m_cf_strSubject></m_cf_strSubject>
<m_cf_strManifestDescription></m_cf_strManifestDescription>
<m_cf_strLanguage>en</m_cf_strLanguage>
<m_cf_SCORMPackage>2</m_cf_SCORMPackage>
<m_cf_strSCOTitle></m_cf_strSCOTitle>
<m_cf_ProductionFormat>8</m_cf_ProductionFormat>
<m_cf_strTitle></m_cf_strTitle>
<m_cf_strAuthor>Mark Dexter</m_cf_strAuthor>
<m_cf_strCopyright></m_cf_strCopyright>
<m_cf_strDescription></m_cf_strDescription>
<m_cf_MultiFileOutputStyle>0</m_cf_MultiFileOutputStyle>
<m_cf_strVideoCompressor>Techsmith Screen Capture Codec</m_cf_strVideoCompressor>
<m_cf_bAddCaption>0</m_cf_bAddCaption>
<m_cf_bWriteCCInfo>1</m_cf_bWriteCCInfo>
<m_cf_bOverlayCaption>1</m_cf_bOverlayCaption>
<m_cf_strCaptionFontFamily>Microsoft Sans Serif</m_cf_strCaptionFontFamily>
<m_cf_bAddIPODFileToProduction>0</m_cf_bAddIPODFileToProduction>
<m_cf_bAddMP3FileToProduction>0</m_cf_bAddMP3FileToProduction>
<m_cf_bAddPPTFileToProduction>0</m_cf_bAddPPTFileToProduction>
<m_cf_strPPTFileToAddToProduction></m_cf_strPPTFileToAddToProduction>
<m_cf_bAviEncodeAudio>1</m_cf_bAviEncodeAudio>
<m_cf_AVIFrameRate>10</m_cf_AVIFrameRate>
<m_cf_nKeyFrameRate>30</m_cf_nKeyFrameRate>
<m_cf_PIP_nKeyFrameRate>30</m_cf_PIP_nKeyFrameRate>
<m_cf_PIP_AVIFrameRate>0</m_cf_PIP_AVIFrameRate>
<m_cf_SwfPlaybackControls>0</m_cf_SwfPlaybackControls>
<m_cf_strControllerSkinName>glass</m_cf_strControllerSkinName>
<m_cf_nSwfTargetVersion>7</m_cf_nSwfTargetVersion>
<m_cf_bSwfMatchPreloadMovieSize>0</m_cf_bSwfMatchPreloadMovieSize>
<m_cf_bSwfPauseAtStart>1</m_cf_bSwfPauseAtStart>
<m_cf_bSwfPreloadAdvanced>1</m_cf_bSwfPreloadAdvanced>
<m_cf_bSwfSingleSWF>1</m_cf_bSwfSingleSWF>
<m_cf_nSwfMainMovieLoadPercent>10</m_cf_nSwfMainMovieLoadPercent>
<m_cf_nSwfPreloadMinDisplayTime>3</m_cf_nSwfPreloadMinDisplayTime>
<m_cf_clrSwfControlColor>0x00C0C0C0</m_cf_clrSwfControlColor>
<m_cf_bSwfShowAboutBtn>1</m_cf_bSwfShowAboutBtn>
<m_cf_strSwfAboutBoxTxt>Copyright (c) 2007 Mark Dexter. Licensed under the Educational Community License version 1.0.</m_cf_strSwfAboutBoxTxt>
<m_cf_strSwfAboutBoxInfoTxt></m_cf_strSwfAboutBoxInfoTxt>
<m_cf_strSwfAboutTitle>Total Beginners</m_cf_strSwfAboutTitle>
<m_cf_strSwfStartTxt>Eclipse and Java for Total Beginners</m_cf_strSwfStartTxt>
<m_cf_SwfAboutBoxWidth>336</m_cf_SwfAboutBoxWidth>
<m_cf_SwfAboutBoxHeight>270</m_cf_SwfAboutBoxHeight>
<m_cf_bSwfAboutBoxTabSelected>1</m_cf_bSwfAboutBoxTabSelected>
<m_cf_strSwfTimeDisplayFormat>MM:SS</m_cf_strSwfTimeDisplayFormat>
<m_cf_bSwfCCInitiallyVisible>0</m_cf_bSwfCCInitiallyVisible>
<m_cf_bSwfFullScreen>0</m_cf_bSwfFullScreen>
<m_cf_bSwfAllowResizing>1</m_cf_bSwfAllowResizing>
<m_cf_nSwfVolueme>50</m_cf_nSwfVolueme>
<m_cf_bSwfBrandContextMenu>0</m_cf_bSwfBrandContextMenu>
<m_cf_SwfTOCType>1</m_cf_SwfTOCType>
<m_cf_SwfTOCTitle></m_cf_SwfTOCTitle>
<m_cf_bSwfShowMovieDuration>1</m_cf_bSwfShowMovieDuration>
<m_cf_bSwfShowTimeElapsed>1</m_cf_bSwfShowTimeElapsed>
<m_cf_strSwfTimeFont>Arial</m_cf_strSwfTimeFont>
<m_cf_clrSwfTimeFontColor>0x00000000</m_cf_clrSwfTimeFontColor>
<m_cf_SwfEndAction>0</m_cf_SwfEndAction>
<m_cf_strSwfEndActionUrl>http://</m_cf_strSwfEndActionUrl>
<m_cf_nSwfEndActionTarget>0</m_cf_nSwfEndActionTarget>
<m_cf_bPauseAfterJump>1</m_cf_bPauseAfterJump>
<m_cf_rtJumpPoint>0</m_cf_rtJumpPoint>
<m_cf_strSwfStartLogo></m_cf_strSwfStartLogo>
<m_cf_strSwfEndLogo>EndLogo</m_cf_strSwfEndLogo>
<m_cf_strSwfAboutLogo></m_cf_strSwfAboutLogo>
<m_cf_strSwfAboutTitleLogo></m_cf_strSwfAboutTitleLogo>
<m_cf_strSwfTocLogo></m_cf_strSwfTocLogo>
</Production_Data>
